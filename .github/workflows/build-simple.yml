name: Simple Build (Win7 Compatible)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-win7-compatible:
    runs-on: windows-2022

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install aqtinstall
      run: |
        python -m pip install --upgrade pip
        pip install aqtinstall==3.1.*

    - name: Install Qt 5.15.2
      run: |
        echo "Installing Qt 5.15.2..."
        python -m aqt install-qt windows desktop 5.15.2 win64_mingw81 -m qtquickcontrols2 --outputdir ${{ github.workspace }}/qt
        echo "Installation completed"

    - name: Install MinGW
      run: |
        echo "Installing MinGW..."
        python -m aqt install-tool windows desktop tools_mingw qt.tools.win64_mingw810 --outputdir ${{ github.workspace }}/qt
        echo "MinGW installation completed"

    - name: List Qt directory structure
      shell: cmd
      run: |
        echo Listing Qt root directory:
        dir /s /b qt | findstr /v /i ".dll" | findstr /v /i ".exe" | findstr /v /i ".a" | findstr /v /i ".prl" | head -50
        echo.
        echo Checking for Qt5Config.cmake:
        dir /s /b qt | findstr Qt5Config.cmake
        echo.
        echo Checking Qt directories:
        if exist qt\5.15.2 (
          echo Found qt\5.15.2
          dir qt\5.15.2
        ) else (
          echo qt\5.15.2 not found, checking other locations...
          dir qt
        )

    - name: Find actual Qt path
      shell: powershell
      run: |
        Write-Host "Searching for Qt installation..."
        $qtPath = Get-ChildItem -Path "qt" -Directory -Recurse | Where-Object { $_.Name -eq "mingw81_64" } | Select-Object -First 1
        if ($qtPath) {
          Write-Host "Found Qt at: $($qtPath.FullName)"
          $qtRoot = $qtPath.FullName
          echo "QT_ROOT_DIR=$qtRoot" >> $env:GITHUB_ENV
          echo "Qt5_DIR=$qtRoot\lib\cmake\Qt5" >> $env:GITHUB_ENV
        } else {
          Write-Host "Qt installation not found!"
          Get-ChildItem -Path "qt" -Directory
          exit 1
        }

    - name: Build with CMake
      shell: cmd
      run: |
        echo Setting up environment...
        set PATH=${{ github.workspace }}\qt\Tools\mingw810_64\bin;%PATH%

        echo Qt5_DIR: %Qt5_DIR%
        echo QT_ROOT_DIR: %QT_ROOT_DIR%

        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%QT_ROOT_DIR% -DQt5_DIR=%Qt5_DIR%
        if %errorlevel% neq 0 exit /b %errorlevel%

        mingw32-make -j2
        if %errorlevel% neq 0 exit /b %errorlevel%

    - name: Check build output
      shell: cmd
      run: |
        dir build
        if exist build\QtQmlDemo.exe (
          echo Build successful
          build\QtQmlDemo.exe --version
        ) else (
          echo Build failed - exe not found
          exit 1
        )

    - name: Deploy application
      shell: cmd
      run: |
        mkdir release
        copy build\QtQmlDemo.exe release\
        cd release
        %QT_ROOT_DIR%\bin\windeployqt.exe --qmldir ..\qml --quick --no-translations --no-system-d3d-compiler --no-opengl-sw --no-angle --release QtQmlDemo.exe

    - name: Copy MinGW runtime
      shell: cmd
      run: |
        copy "${{ github.workspace }}\qt\Tools\mingw810_64\bin\libgcc_s_seh-1.dll" release\ 2>nul
        copy "${{ github.workspace }}\qt\Tools\mingw810_64\bin\libstdc++-6.dll" release\ 2>nul
        copy "${{ github.workspace }}\qt\Tools\mingw810_64\bin\libwinpthread-1.dll" release\ 2>nul
        echo MinGW runtime libraries copied (if they exist)

    - name: Add Win7 compatibility files
      shell: powershell
      run: |
        # Create a batch file for easy launching
        @"
        @echo off
        echo Starting QtQmlDemo...
        set QT_OPENGL=software
        set QT_ANGLE_PLATFORM=d3d9
        start QtQmlDemo.exe
        "@ | Out-File -FilePath "release\Launch_QtQmlDemo.bat" -Encoding ASCII

        # Create README for Windows 7 users
        @"
        QtQmlDemo for Windows 7
        ========================

        Requirements:
        - Windows 7 SP1 or later
        - DirectX 9.0c or later

        To run the application:
        1. Double-click Launch_QtQmlDemo.bat or QtQmlDemo.exe

        If the application doesn't start:
        1. Install Visual C++ Redistributable 2015-2019 (x64)
           Download from: https://aka.ms/vs/16/release/vc_redist.x64.exe
        2. Update DirectX
        3. Try running as administrator

        Included files:
        - QtQmlDemo.exe - Main application
        - Launch_QtQmlDemo.bat - Launcher with compatibility settings
        - Qt and MinGW runtime libraries
        "@ | Out-File -FilePath "release\README_WIN7.txt" -Encoding ASCII

    - name: Create archive
      shell: powershell
      run: |
        Compress-Archive -Path release\* -DestinationPath QtQmlDemo-Win7-Compatible.zip
        Write-Host "Archive created successfully"
        Get-ChildItem release | Format-Table Name, Length

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: QtQmlDemo-Win7-Compatible
        path: |
          QtQmlDemo-Win7-Compatible.zip
          release/
        retention-days: 30

    - name: Upload executable only
      uses: actions/upload-artifact@v4
      with:
        name: QtQmlDemo-Executable
        path: release/QtQmlDemo.exe
        retention-days: 30