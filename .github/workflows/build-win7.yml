name: Build Win7 Compatible App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Qt
      shell: cmd
      run: |
        pip install aqtinstall

        echo Installing Qt 5.15.2 and MinGW...
        aqt install-qt windows desktop 5.15.2 win64_mingw81 -m qtquickcontrols2 -O Qt
        aqt install-tool windows desktop tools_mingw qt.tools.win64_mingw810 -O Qt

        echo.
        echo Checking installation:
        dir Qt /s /b | findstr /i "bin cmake"

        echo.
        echo Qt root contents:
        dir Qt

    - name: Find Qt Path
      shell: cmd
      run: |
        echo Searching for Qt installation...

        for /d %%i in (Qt\*) do (
          if exist "%%i\mingw81_64" (
            echo Found Qt at: %%i\mingw81_64
            set QT_VERSION_DIR=%%i
          )
        )

        echo.
        echo Full directory structure:
        dir Qt /s /b | findstr /v "\.dll" | findstr /v "\.a" | findstr /v "\.exe" | findstr /v "\.h" | findstr /v "\.cpp" | findstr /v "\.prl"

    - name: Build
      shell: cmd
      run: |
        rem Find Qt dynamically
        set QT_ROOT=%CD%\Qt

        rem Search for Qt installation
        for /d %%i in (%QT_ROOT%\*) do (
          if exist "%%i\mingw81_64\lib\cmake\Qt5\Qt5Config.cmake" (
            set QT_DIR=%%i\mingw81_64
            echo Found Qt at: %%i\mingw81_64
            goto :found
          )
        )

        echo ERROR: Could not find Qt installation
        exit 1

        :found
        set MINGW_DIR=%QT_ROOT%\Tools\mingw810_64
        set PATH=%MINGW_DIR%\bin;%QT_DIR%\bin;%PATH%

        echo Building with:
        echo QT_DIR=%QT_DIR%
        echo MINGW_DIR=%MINGW_DIR%

        mkdir build
        cd build

        cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%QT_DIR%
        if %errorlevel% neq 0 exit /b %errorlevel%

        mingw32-make -j2
        if %errorlevel% neq 0 exit /b %errorlevel%

        echo Build successful!
        dir *.exe

    - name: Deploy
      shell: cmd
      run: |
        mkdir deploy
        copy build\QtQmlDemo.exe deploy\

        rem Find Qt dynamically for deployment
        set QT_ROOT=%CD%\Qt
        for /d %%i in (%QT_ROOT%\*) do (
          if exist "%%i\mingw81_64\bin\windeployqt.exe" (
            set QT_DIR=%%i\mingw81_64
            goto :deploy
          )
        )

        :deploy
        %QT_DIR%\bin\windeployqt.exe --dir deploy --qmldir qml --quick --no-translations --no-system-d3d-compiler --no-opengl-sw --release deploy\QtQmlDemo.exe

        rem Copy MinGW runtime
        copy %QT_ROOT%\Tools\mingw810_64\bin\libgcc_s_seh-1.dll deploy\ 2>nul
        copy %QT_ROOT%\Tools\mingw810_64\bin\libstdc++-6.dll deploy\ 2>nul
        copy %QT_ROOT%\Tools\mingw810_64\bin\libwinpthread-1.dll deploy\ 2>nul

        rem Create launcher
        echo @echo off > deploy\Launch.bat
        echo set QT_OPENGL=software >> deploy\Launch.bat
        echo start QtQmlDemo.exe %%* >> deploy\Launch.bat

        echo Deploy complete. Contents:
        dir deploy

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: QtQmlDemo-Win7-${{ github.run_number }}
        path: deploy/
        retention-days: 30