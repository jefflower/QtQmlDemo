name: Build Windows Executable

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-2019  # Windows Server 2019 for better Win7 compatibility

    strategy:
      matrix:
        qt_version: [5.15.2]
        compiler: [msvc2019_64, mingw81_64]
        include:
          - compiler: msvc2019_64
            qt_arch: win64_msvc2019_64
            cmake_generator: "Visual Studio 16 2019"
            cmake_arch: x64
          - compiler: mingw81_64
            qt_arch: win64_mingw81
            cmake_generator: "MinGW Makefiles"
            cmake_arch: x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        host: windows
        target: desktop
        arch: ${{ matrix.qt_arch }}
        modules: qtquickcontrols2
        cache: true
        cache-key-prefix: 'qt-cache-${{ matrix.qt_version }}-${{ matrix.compiler }}'

    - name: Setup MSVC
      if: matrix.compiler == 'msvc2019_64'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake (MSVC)
      if: matrix.compiler == 'msvc2019_64'
      run: |
        cd build
        cmake .. -G "${{ matrix.cmake_generator }}" -A ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (MinGW)
      if: matrix.compiler == 'mingw81_64'
      run: |
        cd build
        cmake .. -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Deploy Qt (Windows deployment)
      run: |
        mkdir deploy
        copy build\Release\QtQmlDemo.exe deploy\ 2>nul || copy build\QtQmlDemo.exe deploy\
        cd deploy
        windeployqt --qmldir ..\qml --quick --no-translations --no-system-d3d-compiler --no-opengl-sw QtQmlDemo.exe

    - name: Create portable package
      run: |
        cd deploy
        echo "Creating portable package..."

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: QtQmlDemo-Windows-${{ matrix.compiler }}-${{ github.sha }}
        path: deploy/

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download MSVC artifact
      uses: actions/download-artifact@v3
      with:
        name: QtQmlDemo-Windows-msvc2019_64-${{ github.sha }}
        path: ./msvc

    - name: Download MinGW artifact
      uses: actions/download-artifact@v3
      with:
        name: QtQmlDemo-Windows-mingw81_64-${{ github.sha }}
        path: ./mingw

    - name: Create zip packages
      run: |
        cd msvc && zip -r ../QtQmlDemo-Windows-MSVC-${{ github.ref_name }}.zip . && cd ..
        cd mingw && zip -r ../QtQmlDemo-Windows-MinGW-${{ github.ref_name }}.zip . && cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          QtQmlDemo-Windows-MSVC-${{ github.ref_name }}.zip
          QtQmlDemo-Windows-MinGW-${{ github.ref_name }}.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}